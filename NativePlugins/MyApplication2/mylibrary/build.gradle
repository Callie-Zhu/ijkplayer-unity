apply plugin: 'com.android.library'

afterEvaluate {
    generateReleaseBuildConfig.enabled = false
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    compileOnly files('libs\\unity.jar')
    implementation files('libs\\ijkplayer-java.jar')
    implementation files('libs\\ijkplayer-arm7a.jar')

//    releaseImplementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
//    releaseImplementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'

//    implementation 'tv.danmaku.ijk.media:ijkplayer-armv5:0.8.8'
//    implementation 'tv.danmaku.ijk.media:ijkplayer-arm64:0.8.8'
//    implementation 'tv.danmaku.ijk.media:ijkplayer-x86:0.8.8'
//    implementation 'tv.danmaku.ijk.media:ijkplayer-x86_64:0.8.8'
}

task buildAARForUnity(type: Copy) {
    from('build/outputs/aar/')
    into('../../../Build')
    include('mylibrary-release.aar')
//    rename('camera-release.aar', "camera-release.aar-" + pluginVersion + ".aar")
}

buildAARForUnity.dependsOn(clean, build)
build.mustRunAfter clean